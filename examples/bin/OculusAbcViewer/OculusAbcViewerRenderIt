#!/usr/bin/env python2.5
##-*****************************************************************************
##
## Copyright (c) 2009-2011, Industrial Light & Magic,
##   a division of Lucasfilm Entertainment Company Ltd.
##
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are
## met:
## *       Redistributions of source code must retain the above copyright
## notice, this list of conditions and the following disclaimer.
## *       Redistributions in binary form must reproduce the above
## copyright notice, this list of conditions and the following disclaimer
## in the documentation and/or other materials provided with the
## distribution.
## *       Neither the name of Industrial Light & Magic nor the names of
## its contributors may be used to endorse or promote products derived
## from this software without specific prior written permission.
##
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
## "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
## LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
## A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
## OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
## SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
## LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
## DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
## THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
## (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
## OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##
##-*****************************************************************************
from __future__ import with_statement

import sys, os
import subprocess as SP
from subprocess import Popen
from optparse import OptionParser
from tempfile import mkstemp

##-*****************************************************************************
def createOptionParser( help="" ):
    parser = OptionParser( help )

    parser.add_option( "-C", "--camerafile", dest="camerafile",
                       help="File that contains the RIB definition of the camera" )

    parser.add_option( "-P", "--procedural", dest="procedural",
                       help="Path to the AlembicRiProcedural.so" )

    parser.add_option( "--shutteropen", dest="shutterOpen", type="float",
                       help="Shutter open time" )
    parser.add_option( "--shutterclose", dest="shutterClose", type="float",
                       help="Shutter close time" )

    parser.add_option( "--sample1", dest="samp1", type="float",
                       help="First sample time" )
    parser.add_option( "--sample2", dest="samp2", type="float",
                       help="Second sample time" )

    parser.add_option( "-B", "--bounds", dest="bounds", default="",
                       help="Optional RiBound" )

    parser.add_option( "-a", "--asset", dest="asset",
                       help="Path to alembic_asset.abc file" )

    return parser

##-*****************************************************************************
def getOpts():
    help = "All flags except -B/--bounds are mandatory."
    p = createOptionParser( help )

    if len( sys.argv ) < 2:
        p.print_help()
        sys.exit( 0 )

    opts, args = p.parse_args()
    o = opts

    camerafile = ""
    procedural = ""
    shutterOpen = ""
    shutterClose = ""
    samp1 = ""
    samp2 = ""
    bounds = ""
    asset = ""

    try:
        camerafile = o.camerafile
        procedural = o.procedural
        shutterOpen = o.shutterOpen
        shutterClose = o.shutterClose
        samp1 = o.samp1
        samp2 = o.samp2
        bounds = o.bounds
        asset = o.asset
    except AttributeError:
        p.print_help()
        sys.exit( -1 )

    return ( camerafile, procedural, asset, shutterOpen, shutterClose, samp1,
             samp2, bounds )

##-*****************************************************************************
def mkRib( camera, procedural, asset, shutterOpen, shutterClose, samp1, samp2,
           bounds ):
    camstr = ""
    _, ribfile = mkstemp( prefix="OculusAbcViewer", suffix=".rib" )
    _, exrfile = mkstemp( prefix="OculusAbcViewer", suffix=".exr" )
    bounded = "false"
    rtboundstr = ""
    if bounds:
        bounded = "true"
        rtboundstr = bounds
    else:
        rtboundstr = "[-1e6 1e6 -1e6 1e6 -1e6 1e6]"

    with open( camera ) as f:
        camstr = ''.join( f.readlines() )

    ribstr = """##RenderMan RIB

version 3.04
ShadingInterpolation "smooth"
ShadingRate 1.0
Shutter %f %f
Quantize "rgba" 0 0 0 0
Display "%s" "openexr" "rgba"
PixelSamples 5 5
%s
WorldBegin
Procedural "DynamicLoad" ["%s" "-filename %s -fps 24.0 -frame %f"]
%s
WorldEnd
""" % ( shutterOpen,
        shutterClose,
        exrfile,
        camstr,
        procedural,
        asset,
        samp1,
        rtboundstr )

    with open( ribfile, 'w' ) as rib:
        rib.write( ribstr )

    return ribfile, exrfile

##-*****************************************************************************
def renderAndDisplay( ribfile, exrfile ):
    print
    print "RIB = %s" % ribfile
    print "EXR = %s" % exrfile

    render = Popen( ["render", "-t:4", "-progress", ribfile],
                    stdin=SP.PIPE,
                    stdout=sys.stderr,
                    stderr=SP.PIPE,
                    close_fds=True )
    render.wait()

    moviePlayer = Popen( ["exrdisplay", exrfile],
                        stdin=SP.PIPE,
                        stdout=SP.PIPE,
                        stderr=SP.PIPE,
                        close_fds=True )

    return


##-*****************************************************************************
def main():
    camerafile, procedural, asset, shutterOpen, shutterClose, samp1,\
    samp2, bounds = getOpts()

    rib, exr = mkRib( camerafile, procedural, asset, shutterOpen,
                      shutterClose, samp1, samp2, bounds )

    renderAndDisplay( rib, exr )

    return 0

##-*****************************************************************************
if __name__ == "__main__":
    sys.exit( main() )
